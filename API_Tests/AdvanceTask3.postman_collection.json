{
	"info": {
		"_postman_id": "cd0d6b48-1332-4b8e-9666-534744d57ce0",
		"name": "AdvanceTask3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27827593"
	},
	"item": [
		{
			"name": "User API",
			"item": [
				{
					"name": "SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 6000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
									"});\r",
									"\r",
									"const requestSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"rememberMe\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"email\",\r",
									"    \"password\",\r",
									"    \"rememberMe\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"const requestBody = {\r",
									"  \"email\": \"vandanapradeep1991@gmail.com\",\r",
									"  \"password\": \"12341234\",\r",
									"  \"rememberMe\": false\r",
									"}\r",
									"\r",
									"const result = tv4.validateMultiple(requestBody, requestSchema);\r",
									" \r",
									"if (!result.valid) {\r",
									"    console.error(\"Request body does not match the schema:\");\r",
									"    result.errors.forEach(error => {\r",
									"        console.error(`- ${error.message}`);\r",
									"    });\r",
									"} else {\r",
									"    console.log(\"Request body matches the schema\");\r",
									"}\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.isSuccess).to.be.a(\"boolean\"); \r",
									"    //pm.expect(jsonData.token).to.be.a(\"string\");\r",
									" });\r",
									"\r",
									"pm.test(\"Value of fields\", () => {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isSuccess).to.eql(true);\r",
									"    \r",
									"});\r",
									"\r",
									"//JSON Schema\r",
									"var schema = {\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isSuccess\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"token\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"token\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"expires\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"token\",\r",
									"        \"expires\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isSuccess\",\r",
									"    \"token\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate User Authentication\", function () {\r",
									" var response = pm.response.json();\r",
									"\r",
									"pm.expect(response).to.have.property(\"isSuccess\").and.be.a(\"boolean\");\r",
									"if (response.isSuccess){\r",
									"pm.expect(response.token).to.be.an(\"object\").and.to.have.property(\"token\");\r",
									"pm.environment.set(\"authToken\", response.token.token)\r",
									"}\r",
									"else {\r",
									" pm.expect(response).to.have.property(\"errorMessage\").and.be.a(\"string\");\r",
									"  }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"vandanapradeep1991@gmail.com\",\r\n  \"password\": \"12341234\",\r\n  \"rememberMe\": false\r\n}"
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed missing ')' after argument list\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", function () {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    var message = response.message;\r",
									"\r",
									"    if (success) {\r",
									"        pm.test(\"Password Changed Successfully\", function () {\r",
									"            pm.expect(success).to.be.true;\r",
									"            pm.expect(message).to.equal(\"Password Changed Successfully\");\r",
									"        });\r",
									"\r",
									"        var responseSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									" // Assertion - Validate JSON Schema\r",
									"     pm.test(\"Validate schema\", () => {\r",
									"         pm.response.to.have.jsonSchema(responseSchema);\r",
									"            });\r",
									"\r",
									"var request = JSON.parse(request.data);\r",
									"var newPassword = request.newPassword; \r",
									"var minLength = 6; \r",
									"var maxLength = 20; \r",
									"\r",
									"// Check if the length of the password is within the specified range\r",
									"pm.test(\"Password length is within the allowed range\", function () {\r",
									"newPassword.length >= minLength && newPassword.length <= maxLength;\r",
									"    });\r",
									"} \r",
									"    else if (success === false)\r",
									"    {\r",
									"        pm.test(\"Password Verification Failed\", function () {\r",
									"            pm.expect(success).to.be.false;\r",
									"            pm.expect(message).to.equal(\"Password Verification Failed\");\r",
									"        });\r",
									"         var responseSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									" // Assertion - Validate JSON Schema\r",
									"     pm.test(\"Validate schema\", () => {\r",
									"         pm.response.to.have.jsonSchema(responseSchema);\r",
									"            });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"oldPassword\": \"abcdabcd\",\r\n  \"newPassword\": \"12341234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/updatePassword",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"updatePassword"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Language API",
			"item": [
				{
					"name": "Add Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content-Type header is present\", () => {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"pm.test(\"Server header is Kestrel\", () => {",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');",
									"});",
									"pm.test(\"Response time is less than 6000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(6000);",
									"});",
									"",
									"",
									"var statusCode = pm.response.code;",
									"if (statusCode === 200) {",
									"    var response = pm.response.json();",
									"    var success = response.success;",
									"    var message = response.message;",
									"",
									"    if (success) {",
									"        // Positive case: language added successfully",
									"        pm.test(\"Language added successfully\", function () {",
									"            pm.expect(success).to.be.true;",
									"",
									"            const responseBody = pm.response.json();",
									"            const id = responseBody.id;",
									"            pm.environment.set(\"language_id\", id);",
									"        })",
									"",
									"        // Assertion - Validate adding language response",
									"        var AddLanguageschema = {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"                \"success\": {",
									"                    \"type\": \"boolean\"",
									"                },",
									"                \"id\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            },",
									"            \"required\": [",
									"                \"success\",",
									"                \"id\"",
									"            ],",
									"            \"additionalProperties\": false",
									"        }",
									"        // Assertion - Validate JSON Schema",
									"        pm.test(\"Validate schema\", () => {",
									"            pm.response.to.have.jsonSchema(AddLanguageschema);",
									"        });",
									"        //Test data type of response",
									"        const jsonData = pm.response.json();",
									"        pm.test(\"Test data type of the response\", () => {",
									"            pm.expect(jsonData).to.be.an(\"object\");",
									"            pm.expect(jsonData.success).to.be.a(\"boolean\");",
									"            pm.expect(jsonData.id).to.be.a(\"string\");",
									"        });",
									"    } else if (message === \"This language is already exist in your language list.\") {",
									"        // Negative case: language already exists",
									"        pm.test(\"Duplicate language\", function () {",
									"            pm.expect(success).to.be.false;",
									"            pm.expect(message).to.equal(\"This language is already exist in your language list.\");",
									"            //Schema validation",
									"            var schema = {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"success\": {",
									"                        \"type\": \"boolean\"",
									"                    },",
									"                    \"message\": {",
									"                        \"type\": \"string\"",
									"                    }",
									"                },",
									"                \"required\": [",
									"                    \"success\",",
									"                    \"message\"",
									"                ]",
									"            }",
									"            // Assertion - Validate JSON Schema",
									"            pm.test(\"Validate schema\", () => {",
									"                pm.response.to.have.jsonSchema(schema);",
									"            });",
									"        });",
									"    }",
									"} else if (statusCode === 401) {",
									"    // Unauthorized: unable to add language without authentication",
									"    pm.test(\"Unable to add language without authentication\", function () {",
									"        pm.expect(pm.response.body).to.be.undefined;",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"level\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"name\", \"level\"]\r",
									"};\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"    \"name\": \"Fren\",\r",
									"    \"level\": \"Basic\"\r",
									"};\r",
									"\r",
									"//Validate the request body against the schema \r",
									"\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Fren\",\r\n  \"level\": \"Basic\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addLanguage"
							]
						}
					},
					"response": [
						{
							"name": "Add Language",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Fren\",\r\n  \"level\": \"Basic\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Language",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Fren\",\r\n  \"level\": \"Basic\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Language",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Fren\",\r\n  \"level\": \"Basic\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Language",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": null,\r\n  \"level\": \"Basic\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get Language",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique identifier for the request\r",
									"const requestId = pm.variables.get(\"requestId\"); // assuming you have already defined \"requestId\" variable\r",
									"\r",
									"// Save the requestId to use it for idempotent requests\r",
									"pm.variables.set(\"requestId\", requestId);\r",
									"\r",
									"// Set the X-Request-ID header with the generated requestId\r",
									"pm.request.headers.add({\r",
									"    key: 'X-Request-ID',\r",
									"    value: requestId\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Check if the requestId matches the X-Request-ID header to ensure idempotence\r",
									"pm.test(\"Request ID matches X-Request-ID header\", function () {\r",
									"    const requestId = pm.variables.get(\"requestId\");\r",
									"    const responseRequestId = pm.response.headers.get(\"X-Request-ID\");\r",
									"    pm.expect(responseRequestId).to.eql(requestId);\r",
									"});\r",
									"\r",
									"pm.test(\"Non-nullable fields are not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Assuming the response is an array of language objects\r",
									"    pm.expect(jsonData.length).to.be.above(0); // Assuming there's at least one language returned\r",
									"\r",
									"    jsonData.forEach(function (language, index) {\r",
									"        pm.test(\"Non-nullable fields for language \" + index + \" are not null\", function () {\r",
									"            pm.expect(language).to.have.property('language'); // Check for 'name' field\r",
									"            if (language.language === null) {\r",
									"                console.error(\"Null value found for 'name' field in language \" + index);\r",
									"                pm.expect(language.language).to.not.eql(null); // Fail the test if 'name' is null\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"//JSON Schema validation\r",
									" var getLanguageSchema = \r",
									"{\r",
									"  \r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"personLanguageId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"language\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"languageLevel\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"personLanguageId\",\r",
									"        \"language\",\r",
									"        \"languageLevel\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(getLanguageSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"language_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Update language\r",
									"pm.test(\"German1 has been updated to your languages\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"//pm.environment.set(\"language_id\", response.id);\r",
									"})\r",
									"\r",
									"//JSON Schema Validations\r",
									"var UpdateLanguageSchema =\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ],\"additionalProperties\": false\r",
									"}\r",
									"\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(UpdateLanguageSchema);\r",
									"});\r",
									"\r",
									"} \r",
									"else if (message === \"This language is already exist in your language list.\") {\r",
									" // Negative case: language already exists\r",
									"pm.test(\"Duplicate language\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This language is already exist in your language list.\");\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add language without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": { \"type\": \"string\" },\r",
									"        \"name\": { \"type\": \"string\" },\r",
									"        \"level\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"level\"]\r",
									"};\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"    \"id\": pm.variables.get(\"language_id\"), // Accessing variables in Postman\r",
									"    \"name\": \"German1\",\r",
									"    \"level\": \"Basic\"\r",
									"};\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{language_id}}\",\r\n  \"name\": \"German1\",\r\n  \"level\": \"Basic\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar language = response.language;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: language deleted successfully\r",
									"pm.test(\"language deleted successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"})\r",
									"\r",
									"// Assertion - Validate adding language response\r",
									"var deleteLanguageschema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"language\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"language\"\r",
									"  ]\r",
									"\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(deleteLanguageschema);\r",
									"});\r",
									"\r",
									"//Test data type of response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.language).to.be.a(\"string\");\r",
									" });\r",
									"} \r",
									"else if (message === \"Error while deleting language Object reference not set to an instance of an object.\") {\r",
									" // Negative case: language not deleted\r",
									"pm.test(\"Delete Unsuccessful\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"Error while deleting language Object reference not set to an instance of an object.\");\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add language without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"id\": \"{{language_id}}\"\r",
									"}\r",
									"//Validate the request body against the schema \r",
									"\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{language_id}}\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteLanguage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Skills API",
			"item": [
				{
					"name": "Add Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful POST request\" , function(){",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"    });",
									"",
									"pm.test(\"status code has a string \" , function(){",
									"    pm.response.to.have.status(\"OK\");",
									"    });",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Server header is Kestrel\", () => {",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');",
									"});",
									"",
									"pm.test(\"Response time is less than 2200ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"var statusCode = pm.response.code;",
									"\tif (statusCode === 200) {",
									" var response = pm.response.json();",
									"\tvar success = response.success;",
									"\tvar message = response.message;",
									"\t\t\t\t\t\t\t\t\t    ",
									"if (success) {",
									"// Positive case: skill added successfully",
									"pm.test(\"Skills added successfully\", function () {",
									"pm.expect(success).to.be.true;",
									"",
									"const responseBody = pm.response.json();",
									"const id = responseBody.id;",
									"pm.environment.set(\"skill_id\", id);",
									"})",
									"",
									"// Assertion - Validate adding skill response",
									"var addSkillsSchema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"id\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"success\",",
									"    \"id\"",
									"  ]",
									"}",
									"// Assertion - Validate JSON Schema",
									"pm.test(\"Validate schema\", () => {",
									"pm.response.to.have.jsonSchema(addSkillsSchema);",
									"});",
									"",
									"//Test data type of response",
									"",
									"const jsonData = pm.response.json();",
									" pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");  ",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); ",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									" });",
									"} ",
									"else if (message === \"This skill is already exist in your skill list.\") {",
									" // Negative case: skill already exists",
									"pm.test(\"Duplicate skill\", function () {",
									"\t pm.expect(success).to.be.false;",
									"pm.expect(message).to.equal(\"This skill is already exist in your skill list.\");",
									"",
									"//Schema validation",
									"",
									"var schema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"message\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"success\",",
									"    \"message\"",
									"  ]",
									"}",
									"// Assertion - Validate JSON Schema",
									"pm.test(\"Validate schema\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"});",
									"}",
									"} else if (statusCode === 401) {",
									"// Unauthorized: unable to add language without authentication",
									"pm.test(\"Unable to add language without authentication\", function () {",
									"pm.expect(pm.response.body).to.be.undefined;",
									" });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"PersonSkillId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Skill\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ExperienceLevel\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"PersonSkillId\",\r",
									"    \"Skill\",\r",
									"    \"ExperienceLevel\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"PersonSkillId\": 0,\r",
									"  \"Skill\": \"Coding\",\r",
									"  \"ExperienceLevel\": \"Intermediate\"\r",
									"}\r",
									"//Validate the request body against the schema \r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"Coding\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addSkill"
							]
						}
					},
					"response": [
						{
							"name": "Add Skills",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"1234#$%\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addSkill",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Skills",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"Coding\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addSkill",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Skills",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": null,\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addSkill",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get Skills",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique identifier for the request\r",
									"const requestId = pm.variables.get(\"requestId\"); // assuming you have already defined \"requestId\" variable\r",
									"\r",
									"// Save the requestId to use it for idempotent requests\r",
									"pm.variables.set(\"requestId\", requestId);\r",
									"\r",
									"// Set the X-Request-ID header with the generated requestId\r",
									"pm.request.headers.add({\r",
									"    key: 'X-Request-ID',\r",
									"    value: requestId\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Check if the requestId matches the X-Request-ID header to ensure idempotence\r",
									"pm.test(\"Request ID matches X-Request-ID header\", function () {\r",
									"    const requestId = pm.variables.get(\"requestId\");\r",
									"    const responseRequestId = pm.response.headers.get(\"X-Request-ID\");\r",
									"    pm.expect(responseRequestId).to.eql(requestId);\r",
									"});\r",
									"\r",
									"pm.test(\"Non-nullable fields are not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array'); // Assuming the response is an array of language objects\r",
									"    pm.expect(jsonData.length).to.be.above(0); // Assuming there's at least one language returned\r",
									"\r",
									"    jsonData.forEach(function (skill, index) {\r",
									"        pm.test(\"Non-nullable fields for skill \" + index + \" are not null\", function () {\r",
									"            pm.expect(skill).to.have.property('skill'); // Check for 'name' field\r",
									"            if (skill.skill === null) {\r",
									"                console.error(\"Null value found for 'name' field in skill \" + index);\r",
									"                pm.expect(skill.skill).to.not.eql(null); // Fail the test if 'name' is null\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"//JSON Schema validation\r",
									" var getSkillSchema = \r",
									"{\r",
									"  \r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"personSkillId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"skill\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"experienceLevel\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"personSkillId\",\r",
									"        \"skill\",\r",
									"        \"experienceLevel\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(getSkillSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"skill_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Update language\r",
									"pm.test(\"coding has been updated to your skill\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"//pm.environment.set(\"language_id\", response.id);\r",
									"})\r",
									"\r",
									"//JSON Schema Validations\r",
									"var UpdateSkillSchema =\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(UpdateSkillSchema);\r",
									"});\r",
									"\r",
									"} \r",
									"else if (message === \"This skill is already exist in your skill list.\") {\r",
									" // Negative case: skill already exists\r",
									"pm.test(\"Duplicate skill\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This skill is already exist in your skill list.\");\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to update skill without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"PersonSkillId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Skill\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ExperienceLevel\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"PersonSkillId\",\r",
									"    \"Skill\",\r",
									"    \"ExperienceLevel\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"PersonSkillId\": \"{{skill_id}}\",\r",
									"  \"Skill\": \"coding\",\r",
									"  \"ExperienceLevel\": \"Intermediate\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": \"{{skill_id}}\",\r\n  \"Skill\": \"coding\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: skill deleted successfully\r",
									"pm.test(\"Skill deleted successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"})\r",
									"\r",
									"// Assertion - Validate adding language response\r",
									"var deleteSkillschema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"skill\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"skill\"\r",
									"  ]\r",
									"\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(deleteSkillschema);\r",
									"});\r",
									"\r",
									"//Test data type of response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.skill).to.be.a(\"string\");\r",
									" });\r",
									"} \r",
									"else if (message === \"Error while deleting skill Object reference not set to an instance of an object.\") {\r",
									" // Negative case: skill not deleted\r",
									"pm.test(\"Delete Unsuccessful\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"Error while deleting skill Object reference not set to an instance of an object.\");\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: \r",
									"pm.test(\"Unable to add skill without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"PersonSkillId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Skill\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ExperienceLevel\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"PersonSkillId\",\r",
									"    \"Skill\",\r",
									"    \"ExperienceLevel\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"PersonSkillId\": \"{{skill_id}}\",\r",
									"  \"Skill\": \"coding\",\r",
									"  \"ExperienceLevel\": \"Intermediate\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": \"{{skill_id}}\",\r\n  \"Skill\": \"coding\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteSkill"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Education API",
			"item": [
				{
					"name": "Add Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\" , function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    });\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: education added successfully\r",
									"pm.test(\"Education added successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"\r",
									"const responseBody = pm.response.json();\r",
									"const id = responseBody.id;\r",
									"pm.environment.set(\"education_id\", id);\r",
									"})\r",
									"\r",
									"// Assertion - Validate adding skill response\r",
									"var addEducationSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(addEducationSchema);\r",
									"});\r",
									"\r",
									"//Test data type of response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
									" });\r",
									"} \r",
									"else if (message === \"This information is already exist.\") {\r",
									" // Negative case: education already exists\r",
									"pm.test(\"Duplicate education\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This information is already exist.\");\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add education without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"instituteName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"degree\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"yearOfGraduation\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"instituteName\",\r",
									"    \"title\",\r",
									"    \"degree\",\r",
									"    \"yearOfGraduation\"\r",
									"  ]\r",
									"} \r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"country\": \"Belize\",\r",
									"  \"instituteName\": \"MG\",\r",
									"  \"title\": \"B.A\",\r",
									"  \"degree\": \"English\",\r",
									"  \"yearOfGraduation\": \"2006\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"country\": \"Belize\",\r\n  \"instituteName\": \"MG\",\r\n  \"title\": \"B.A\",\r\n  \"degree\": \"English\",\r\n  \"yearOfGraduation\": \"2006\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addEducation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique identifier for the request\r",
									"const requestId = pm.variables.get(\"requestId\"); // assuming you have already defined \"requestId\" variable\r",
									"\r",
									"// Save the requestId to use it for idempotent requests\r",
									"pm.variables.set(\"requestId\", requestId);\r",
									"\r",
									"// Set the X-Request-ID header with the generated requestId\r",
									"pm.request.headers.add({\r",
									"    key: 'X-Request-ID',\r",
									"    value: requestId\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Check if the requestId matches the X-Request-ID header to ensure idempotence\r",
									"pm.test(\"Request ID matches X-Request-ID header\", function () {\r",
									"    const requestId = pm.variables.get(\"requestId\");\r",
									"    const responseRequestId = pm.response.headers.get(\"X-Request-ID\");\r",
									"    pm.expect(responseRequestId).to.eql(requestId);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getEducation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"education_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Update education\r",
									"pm.test(\"Education Updated Successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"//pm.environment.set(\"language_id\", response.id);\r",
									"})\r",
									"\r",
									"//JSON Schema Validations\r",
									"var UpdateEducationSchema =\r",
									"{\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(UpdateEducationSchema);\r",
									"});\r",
									"\r",
									"} \r",
									"else if (message === \"his information is already exist.\") {\r",
									" // Negative case: skill already exists\r",
									"pm.test(\"Duplicate education\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"his information is already exist.\");\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: \r",
									"pm.test(\"Unable to update education without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"country\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"instituteName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"degree\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"yearOfGraduation\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"country\",\r",
									"    \"instituteName\",\r",
									"    \"degree\",\r",
									"    \"title\",\r",
									"    \"yearOfGraduation\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"id\": \"{{education_id}}\",\r",
									"  \"country\": \"Bahrain\",\r",
									"  \"instituteName\": \"CUSAT\",\r",
									"  \"degree\": \"CS\",\r",
									"  \"title\": \"B.Tech\",\r",
									"  \"yearOfGraduation\": \"2008\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{education_id}}\",\r\n  \"country\": \"Bahrain\",\r\n  \"instituteName\": \"CUSAT\",\r\n  \"degree\": \"CS\",\r\n  \"title\": \"B.Tech\",\r\n  \"yearOfGraduation\": \"2008\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateEducation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: skill deleted successfully\r",
									"pm.test(\"Education deleted successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"})\r",
									"\r",
									"// Assertion - Validate adding language response\r",
									"var deleteEducationschema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(deleteEducationschema);\r",
									"});\r",
									"\r",
									"//Test data type of response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									" });\r",
									"} \r",
									"else if (message === \"Error while deleting skill Object reference not set to an instance of an object.\") {\r",
									" // Negative case: skill not deleted\r",
									"pm.test(\"Delete Unsuccessful\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"Error while deleting skill Object reference not set to an instance of an object.\");\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"});\r",
									"}else if (success === false)\r",
									"{\r",
									"    pm.test(\"Education not found\", function () {\r",
									"pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"Education entry not found\");\r",
									"})\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add language without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"id\": \"{{education_id}}\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{education_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteEducation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Certification API",
			"item": [
				{
					"name": "Add Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Successful POST request', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([",
									"        200,",
									"        201",
									"    ]);",
									"})",
									"",
									"pm.test('status code has a string ', function () {",
									"    pm.response.to.have.status('OK');",
									"})",
									"",
									"pm.test('Content-Type header is present', () => {",
									"    pm.response.to.have.header('Content-Type');",
									"})",
									"",
									"pm.test('Content-Type header is application/json', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"})",
									"",
									"pm.test('Server header is Kestrel', () => {",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');",
									"})",
									"",
									"pm.test('Response time is less than 2200ms', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);",
									"})",
									"",
									"var statusCode = pm.response.code;",
									"\tif (statusCode === 200) {",
									" var response = pm.response.json();",
									"\tvar success = response.success;",
									"\tvar message = response.message;",
									"\t\t\t\t\t\t\t\t\t    ",
									"if (success) {",
									"// Positive case: skill added successfully",
									"pm.test(\"Skills added successfully\", function () {",
									"pm.expect(success).to.be.true;",
									"",
									"const responseBody = pm.response.json();",
									"const id = responseBody.id;",
									"pm.environment.set(\"certificate_id\", id);",
									"})",
									"",
									"// Assertion - Validate adding certificate response",
									"var addCertificateSchema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"id\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"success\",",
									"    \"id\"",
									"  ]",
									"}",
									"// Assertion - Validate JSON Schema",
									"pm.test(\"Validate schema\", () => {",
									"pm.response.to.have.jsonSchema(addCertificateSchema);",
									"});",
									"",
									"//Test data type of response",
									"",
									"const jsonData = pm.response.json();",
									" pm.test(\"Test data type of the response\", () => {",
									"    pm.expect(jsonData).to.be.an(\"object\");  ",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); ",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									" });",
									"} ",
									"else if (message === \"This information is already exist.\") {",
									" // Negative case: certificate already exists",
									"pm.test(\"Duplicate certificate\", function () {",
									"\t pm.expect(success).to.be.false;",
									"pm.expect(message).to.equal(\"This information is already exist.\");",
									"",
									"//Schema validation",
									"",
									"var schema = {",
									"  ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"message\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"success\",",
									"    \"message\"",
									"  ]",
									"}",
									"// Assertion - Validate JSON Schema",
									"pm.test(\"Validate schema\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"});",
									"}",
									"} else if (statusCode === 401) {",
									"// Unauthorized: unable to add language without authentication",
									"pm.test(\"Unable to add certificate without authentication\", function () {",
									"pm.expect(pm.response.body).to.be.undefined;",
									" });",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"certificationName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationFrom\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationYear\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"certificationName\",\r",
									"    \"certificationFrom\",\r",
									"    \"certificationYear\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"certificationName\": \"CTFL\",\r",
									"  \"certificationFrom\": \"Astqb\",\r",
									"  \"certificationYear\": \"2006\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"certificationName\": \"CTFL\",\r\n  \"certificationFrom\": \"Astqb\",\r\n  \"certificationYear\": \"2006\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addCertification"
							]
						}
					},
					"response": [
						{
							"name": "Add Certificate",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": null,\r\n  \"certificationFrom\": \"Astqb\",\r\n  \"certificationYear\": \"2006\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addCertification",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Certificate",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"12345@#$$\",\r\n  \"certificationFrom\": \"12345!@#$\",\r\n  \"certificationYear\": \"2006\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addCertification",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Certificate",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"CTFL\",\r\n  \"certificationFrom\": \"Astqb\",\r\n  \"certificationYear\": \"2006\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addCertification",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get Certificate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique identifier for the request\r",
									"const requestId = pm.variables.get(\"requestId\"); // assuming you have already defined \"requestId\" variable\r",
									"\r",
									"// Save the requestId to use it for idempotent requests\r",
									"pm.variables.set(\"requestId\", requestId);\r",
									"\r",
									"// Set the X-Request-ID header with the generated requestId\r",
									"pm.request.headers.add({\r",
									"    key: 'X-Request-ID',\r",
									"    value: requestId\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Request ID matches X-Request-ID header', function () {\r",
									"    const requestId = pm.variables.get('requestId');\r",
									"    const responseRequestId = pm.response.headers.get('X-Request-ID');\r",
									"    pm.expect(responseRequestId).to.eql(requestId);\r",
									"})\r",
									"\r",
									"pm.test('Non-nullable fields are not null', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"    jsonData.forEach(function (certificationName, index) {\r",
									"        pm.test('Non-nullable fields for certificate ' + index + ' are not null', function () {\r",
									"            pm.expect(certificationName).to.have.property('certificationName');\r",
									"            if (certificationName.certificationName === null) {\r",
									"                console.error('Null value found for \\'name\\' field in certificate ' + index);\r",
									"                pm.expect(certificationName.certificationName).to.not.eql(null);\r",
									"            }\r",
									"        });\r",
									"    });\r",
									"})\r",
									"\r",
									"var getCertificationSchema ={\r",
									"  \r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"certificationName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"certificationFrom\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"certificationYear\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"certificationName\",\r",
									"        \"certificationFrom\",\r",
									"        \"certificationYear\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Validate schema', () => {\r",
									"    pm.response.to.have.jsonSchema(getCertificationSchema);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getCertification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Certification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"certificate_id\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Update language\r",
									"pm.test(\"coding has been updated to your skill\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"//pm.environment.set(\"language_id\", response.id);\r",
									"})\r",
									"\r",
									"//JSON Schema Validations\r",
									"var UpdateCertificationSchema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(UpdateCertificationSchema);\r",
									"});\r",
									"\r",
									"} \r",
									"else if (message === \"This information is already exist.\") {\r",
									" // Negative case: skill already exists\r",
									"pm.test(\"Duplicate skill\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This information is already exist.\");\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add certificate without authentication\r",
									"pm.test(\"Unable to update certificate without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationFrom\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationYear\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"certificationName\",\r",
									"    \"certificationFrom\",\r",
									"    \"certificationYear\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"id\":\"{{certificate_id}}\",\r",
									"  \"certificationName\": \"CTFL-AT\",\r",
									"  \"certificationFrom\": \"istqb\",\r",
									"  \"certificationYear\": 2006\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{certificate_id}}\",\r\n  \"certificationName\": \"CTFL-AT\",\r\n  \"certificationFrom\": \"istqb\",\r\n  \"certificationYear\": 2006\r\n}"
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateCertification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Certification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: certificate deleted successfully\r",
									"pm.test(\"certificate deleted successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"})\r",
									"\r",
									"// Assertion - Validate response\r",
									"var deleteCertificateschema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"certificationName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"certificationName\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(deleteCertificateschema);\r",
									"});\r",
									"\r",
									"//Test data type of response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.certificationName).to.be.a(\"string\");\r",
									" });\r",
									"} \r",
									"else if (message === \"Error while deleting certification Object reference not set to an instance of an object.\") {\r",
									" // Negative case: certtificate not deleted\r",
									"pm.test(\"Delete Unsuccessful\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"Error while deleting certificate Object reference not set to an instance of an object.\");\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to delete without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}else if (statusCode === 500) {\r",
									"\r",
									"pm.test(\"Internal Server Error\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"id\": \"{{certificate_id}}\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{certificate_id}}\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteCertification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ManageListing API",
			"item": [
				{
					"name": "Get Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Successful POST request\" , function(){",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"    });",
									"",
									"pm.test(\"status code has a string \" , function(){",
									"    pm.response.to.have.status(\"OK\");",
									"    });",
									"",
									"pm.test(\"Content-Type header is present\", () => {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"",
									"pm.test(\"Content-Type header is application/json\", () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
									"});",
									"",
									"pm.test(\"Server header is Kestrel\", () => {",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');",
									"});",
									"",
									"pm.test(\"Response time is less than 2200ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);",
									"});",
									"",
									"var getServiceSchema = {",
									" ",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"$schema\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"properties\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"success\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\"",
									"          ]",
									"        },",
									"        \"serviceListing\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"properties\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"id\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"sellerId\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"charge\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"description\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"serviceType\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"locationType\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"availability\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"properties\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"startDate\": {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"type\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"format\": {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"type\",",
									"                            \"format\"",
									"                          ]",
									"                        },",
									"                        \"endDate\": {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"type\": {",
									"                              \"type\": \"array\",",
									"                              \"items\": [",
									"                                {",
									"                                  \"type\": \"string\"",
									"                                },",
									"                                {",
									"                                  \"type\": \"string\"",
									"                                }",
									"                              ]",
									"                            },",
									"                            \"format\": {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"type\",",
									"                            \"format\"",
									"                          ]",
									"                        },",
									"                        \"dayEntries\": {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"type\": {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            \"items\": {",
									"                              \"type\": \"object\",",
									"                              \"properties\": {",
									"                                \"type\": {",
									"                                  \"type\": \"string\"",
									"                                },",
									"                                \"properties\": {",
									"                                  \"type\": \"object\",",
									"                                  \"properties\": {",
									"                                    \"startTime\": {",
									"                                      \"type\": \"object\",",
									"                                      \"properties\": {",
									"                                        \"type\": {",
									"                                          \"type\": \"string\"",
									"                                        },",
									"                                        \"format\": {",
									"                                          \"type\": \"string\"",
									"                                        }",
									"                                      },",
									"                                      \"required\": [",
									"                                        \"type\",",
									"                                        \"format\"",
									"                                      ]",
									"                                    },",
									"                                    \"endTime\": {",
									"                                      \"type\": \"object\",",
									"                                      \"properties\": {",
									"                                        \"type\": {",
									"                                          \"type\": \"string\"",
									"                                        },",
									"                                        \"format\": {",
									"                                          \"type\": \"string\"",
									"                                        }",
									"                                      },",
									"                                      \"required\": [",
									"                                        \"type\",",
									"                                        \"format\"",
									"                                      ]",
									"                                    },",
									"                                    \"available\": {",
									"                                      \"type\": \"object\",",
									"                                      \"properties\": {",
									"                                        \"type\": {",
									"                                          \"type\": \"string\"",
									"                                        }",
									"                                      },",
									"                                      \"required\": [",
									"                                        \"type\"",
									"                                      ]",
									"                                    }",
									"                                  },",
									"                                  \"required\": [",
									"                                    \"startTime\",",
									"                                    \"endTime\",",
									"                                    \"available\"",
									"                                  ]",
									"                                },",
									"                                \"required\": {",
									"                                  \"type\": \"array\",",
									"                                  \"items\": [",
									"                                    {",
									"                                      \"type\": \"string\"",
									"                                    },",
									"                                    {",
									"                                      \"type\": \"string\"",
									"                                    },",
									"                                    {",
									"                                      \"type\": \"string\"",
									"                                    }",
									"                                  ]",
									"                                }",
									"                              },",
									"                              \"required\": [",
									"                                \"type\",",
									"                                \"properties\",",
									"                                \"required\"",
									"                              ]",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"type\",",
									"                            \"items\"",
									"                          ]",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"startDate\",",
									"                        \"endDate\",",
									"                        \"dayEntries\"",
									"                      ]",
									"                    },",
									"                    \"required\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"properties\",",
									"                    \"required\"",
									"                  ]",
									"                },",
									"                \"workSample\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"categoryId\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"subcategoryId\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"tags\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"items\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"type\": {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        \"properties\": {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"id\": {",
									"                              \"type\": \"object\",",
									"                              \"properties\": {",
									"                                \"type\": {",
									"                                  \"type\": \"string\"",
									"                                }",
									"                              },",
									"                              \"required\": [",
									"                                \"type\"",
									"                              ]",
									"                            },",
									"                            \"text\": {",
									"                              \"type\": \"object\",",
									"                              \"properties\": {",
									"                                \"type\": {",
									"                                  \"type\": \"string\"",
									"                                }",
									"                              },",
									"                              \"required\": [",
									"                                \"type\"",
									"                              ]",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"id\",",
									"                            \"text\"",
									"                          ]",
									"                        },",
									"                        \"required\": {",
									"                          \"type\": \"array\",",
									"                          \"items\": [",
									"                            {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          ]",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"type\",",
									"                        \"properties\",",
									"                        \"required\"",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"items\"",
									"                  ]",
									"                },",
									"                \"comments\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"ratings\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"ratingAverages\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"ratingTotalsAndCounts\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"skillTrade\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"items\": {",
									"                      \"type\": \"object\",",
									"                      \"properties\": {",
									"                        \"type\": {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        \"properties\": {",
									"                          \"type\": \"object\",",
									"                          \"properties\": {",
									"                            \"id\": {",
									"                              \"type\": \"object\",",
									"                              \"properties\": {",
									"                                \"type\": {",
									"                                  \"type\": \"string\"",
									"                                }",
									"                              },",
									"                              \"required\": [",
									"                                \"type\"",
									"                              ]",
									"                            },",
									"                            \"text\": {",
									"                              \"type\": \"object\",",
									"                              \"properties\": {",
									"                                \"type\": {",
									"                                  \"type\": \"string\"",
									"                                }",
									"                              },",
									"                              \"required\": [",
									"                                \"type\"",
									"                              ]",
									"                            }",
									"                          },",
									"                          \"required\": [",
									"                            \"id\",",
									"                            \"text\"",
									"                          ]",
									"                        },",
									"                        \"required\": {",
									"                          \"type\": \"array\",",
									"                          \"items\": [",
									"                            {",
									"                              \"type\": \"string\"",
									"                            },",
									"                            {",
									"                              \"type\": \"string\"",
									"                            }",
									"                          ]",
									"                        }",
									"                      },",
									"                      \"required\": [",
									"                        \"type\",",
									"                        \"properties\",",
									"                        \"required\"",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"items\"",
									"                  ]",
									"                },",
									"                \"isTradable\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"isActive\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"createdOn\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"format\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"format\"",
									"                  ]",
									"                },",
									"                \"createdBy\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"updatedOn\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    },",
									"                    \"format\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\",",
									"                    \"format\"",
									"                  ]",
									"                },",
									"                \"updatedBy\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"array\",",
									"                      \"items\": [",
									"                        {",
									"                          \"type\": \"string\"",
									"                        },",
									"                        {",
									"                          \"type\": \"string\"",
									"                        }",
									"                      ]",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"isDeleted\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"id\",",
									"                \"sellerId\",",
									"                \"charge\",",
									"                \"title\",",
									"                \"description\",",
									"                \"serviceType\",",
									"                \"locationType\",",
									"                \"availability\",",
									"                \"workSample\",",
									"                \"categoryId\",",
									"                \"subcategoryId\",",
									"                \"tags\",",
									"                \"comments\",",
									"                \"ratings\",",
									"                \"ratingAverages\",",
									"                \"ratingTotalsAndCounts\",",
									"                \"skillTrade\",",
									"                \"isTradable\",",
									"                \"isActive\",",
									"                \"createdOn\",",
									"                \"createdBy\",",
									"                \"updatedOn\",",
									"                \"updatedBy\",",
									"                \"isDeleted\"",
									"              ]",
									"            },",
									"            \"required\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\",",
									"            \"properties\",",
									"            \"required\"",
									"          ]",
									"        },",
									"        \"categoryTuple\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"properties\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"item1\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                },",
									"                \"item2\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"type\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"type\"",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"item1\",",
									"                \"item2\"",
									"              ]",
									"            },",
									"            \"required\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\",",
									"            \"properties\",",
									"            \"required\"",
									"          ]",
									"        },",
									"        \"currentUserId\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\"",
									"          ]",
									"        },",
									"        \"comments\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"type\": {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"string\"",
									"                }",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"type\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"success\",",
									"        \"serviceListing\",",
									"        \"categoryTuple\",",
									"        \"currentUserId\",",
									"        \"comments\"",
									"      ]",
									"    },",
									"    \"required\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"string\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  ",
									"}",
									"pm.test('Validate schema', () => {",
									"    pm.response.to.have.jsonSchema(getServiceSchema);",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/GetService/?id={{service_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"GetService",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{service_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMultipleServiceListing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    if(success)\r",
									"    {\r",
									"        \r",
									"        // Sorting the data based on createdOn property in descending order\r",
									"response.data.sort((a, b) => new Date(b.createdOn) - new Date(a.createdOn));\r",
									"// Filtering the data based on a specific criteria (e.g., category)\r",
									"const filteredData = response.data.filter(item => item.category === 'Programming & Tech');\r",
									"\r",
									"// Logging the sorted and filtered data for inspection\r",
									"console.log(filteredData);\r",
									"pm.response.json(response);\r",
									"const skipCount = 2; // Number of items to skip\r",
									"const limit = 5; // Maximum number of items to include\r",
									"// Skip the specified number of results from the start of the dataset\r",
									"const skippedData = response.data.slice(skipCount);\r",
									"console.log(skippedData);\r",
									"\r",
									"// Set the modified response body in Postman\r",
									"response.data = skippedData;\r",
									"pm.response.json(response);\r",
									"    }\r",
									"}else if(pm.response.code === 404) {\r",
									"    // Assert that the response status code is 404\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    console.log(\"Resource not found.\");\r",
									"} \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"offset\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"limit\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"offset\",\r",
									"    \"limit\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"offset\": 0,\r",
									"  \"limit\": 5\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offset\": 0,\r\n  \"limit\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getMultipleServiceListing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getMultipleServiceListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddListing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\" , function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    });\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar id = response.id;\r",
									"    var editFlag = response.editFlag;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: service added successfully\r",
									"pm.test(\"Service added successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"\r",
									"    pm.environment.set(\"service_id\", \"id\");\r",
									"\r",
									"const responseBody = pm.response.json();\r",
									"const id = responseBody.id;\r",
									"pm.environment.set(\"service_id\", id);\r",
									"})\r",
									"\r",
									"// Assertion - Validate adding language response\r",
									"var AddServiceschema ={\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"editFlag\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"id\",\r",
									"    \"editFlag\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddServiceschema);\r",
									"});\r",
									"\r",
									"//Test data type of response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
									"      pm.expect(jsonData.editFlag).to.be.a(\"boolean\");\r",
									" });\r",
									"} \r",
									"\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add service without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"categoryId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"subcategoryId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"tags\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"text\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"text\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"serviceType\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"locationType\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"availability\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"startDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"endDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"dayEntries\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"StartTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"EndTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"Available\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"StartTime\",\r",
									"                \"EndTime\",\r",
									"                \"Available\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"StartTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"EndTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"Available\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"StartTime\",\r",
									"                \"EndTime\",\r",
									"                \"Available\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"StartTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"EndTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"Available\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"StartTime\",\r",
									"                \"EndTime\",\r",
									"                \"Available\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"StartTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"EndTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"Available\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"StartTime\",\r",
									"                \"EndTime\",\r",
									"                \"Available\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"StartTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"EndTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"Available\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"StartTime\",\r",
									"                \"EndTime\",\r",
									"                \"Available\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"StartTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"EndTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"Available\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"StartTime\",\r",
									"                \"EndTime\",\r",
									"                \"Available\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"StartTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"EndTime\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"Available\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"StartTime\",\r",
									"                \"EndTime\",\r",
									"                \"Available\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"startDate\",\r",
									"        \"endDate\",\r",
									"        \"dayEntries\"\r",
									"      ]\r",
									"    },\r",
									"    \"skillTrade\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"text\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"text\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"isTradable\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"charge\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"credentials\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"isActive\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"description\",\r",
									"    \"categoryId\",\r",
									"    \"subcategoryId\",\r",
									"    \"tags\",\r",
									"    \"serviceType\",\r",
									"    \"locationType\",\r",
									"    \"availability\",\r",
									"    \"skillTrade\",\r",
									"    \"isTradable\",\r",
									"    \"charge\",\r",
									"    \"credentials\",\r",
									"    \"isActive\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"title\": \"acv\",\r",
									"  \"description\": \"xnndmdm\",\r",
									"  \"categoryId\": \"2\",\r",
									"  \"subcategoryId\": \"2\",\r",
									"  \"tags\": [\r",
									"    {\r",
									"      \"id\": \"wnsn\",\r",
									"      \"text\": \"wnsn\"\r",
									"    },\r",
									"    {\r",
									"      \"id\": \"wwm\",\r",
									"      \"text\": \"wwm\"\r",
									"    }\r",
									"  ],\r",
									"  \"serviceType\": 0,\r",
									"  \"locationType\": 1,\r",
									"  \"availability\": {\r",
									"    \"startDate\": \"2024-04-02\",\r",
									"    \"endDate\": \"\",\r",
									"    \"dayEntries\": [\r",
									"      {\r",
									"        \"StartTime\": \"\",\r",
									"        \"EndTime\": \"\",\r",
									"        \"Available\": false\r",
									"      },\r",
									"      {\r",
									"        \"StartTime\": \"\",\r",
									"        \"EndTime\": \"\",\r",
									"        \"Available\": false\r",
									"      },\r",
									"      {\r",
									"        \"StartTime\": \"\",\r",
									"        \"EndTime\": \"\",\r",
									"        \"Available\": false\r",
									"      },\r",
									"      {\r",
									"        \"StartTime\": \"\",\r",
									"        \"EndTime\": \"\",\r",
									"        \"Available\": false\r",
									"      },\r",
									"      {\r",
									"        \"StartTime\": \"\",\r",
									"        \"EndTime\": \"\",\r",
									"        \"Available\": false\r",
									"      },\r",
									"      {\r",
									"        \"StartTime\": \"\",\r",
									"        \"EndTime\": \"\",\r",
									"        \"Available\": false\r",
									"      },\r",
									"      {\r",
									"        \"StartTime\": \"\",\r",
									"        \"EndTime\": \"\",\r",
									"        \"Available\": false\r",
									"      }\r",
									"    ]\r",
									"  },\r",
									"  \"skillTrade\": [\r",
									"    {\r",
									"      \"id\": \"jsjdjd\",\r",
									"      \"text\": \"jsjdjd\"\r",
									"    },\r",
									"    {\r",
									"      \"id\": \"ejdn\",\r",
									"      \"text\": \"ejdn\"\r",
									"    }\r",
									"  ],\r",
									"  \"isTradable\": true,\r",
									"  \"charge\": 0,\r",
									"  \"credentials\": true,\r",
									"  \"isActive\": true\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"acv\",\r\n  \"description\": \"xnndmdm\",\r\n  \"categoryId\": \"2\",\r\n  \"subcategoryId\": \"2\",\r\n  \"tags\": [\r\n    {\r\n      \"id\": \"wnsn\",\r\n      \"text\": \"wnsn\"\r\n    },\r\n    {\r\n      \"id\": \"wwm\",\r\n      \"text\": \"wwm\"\r\n    }\r\n  ],\r\n  \"serviceType\": 0,\r\n  \"locationType\": 1,\r\n  \"availability\": {\r\n    \"startDate\": \"2024-04-02\",\r\n    \"endDate\": \"\",\r\n    \"dayEntries\": [\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      }\r\n    ]\r\n  },\r\n  \"skillTrade\": [\r\n    {\r\n      \"id\": \"jsjdjd\",\r\n      \"text\": \"jsjdjd\"\r\n    },\r\n    {\r\n      \"id\": \"ejdn\",\r\n      \"text\": \"ejdn\"\r\n    }\r\n  ],\r\n  \"isTradable\": true,\r\n  \"charge\": 0,\r\n  \"credentials\": true,\r\n  \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/addListing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"addListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Work Sample",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"//pm.environment.set(\"worksample_id\", \"id\");\r",
									"pm.environment.get(\"service_id\");\r",
									"\r",
									"var workSampleSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"defaultImg\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"defaultImg\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(workSampleSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getWorkSample/?id={{service_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getWorkSample",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{service_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ToggleActive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    var active = response.active;\r",
									"\r",
									"    if (active) {\r",
									"        pm.test(\"Toggle Button Status is Active\", function () {\r",
									"            var jsonData = pm.response.json();\r",
									"            pm.expect(jsonData.success).to.eql(true); // Verify that the request was successful\r",
									"            pm.expect(jsonData.active).to.eql(true); // Verify that the 'active' property is true\r",
									"        });\r",
									"        var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"active\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"active\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"    } else {\r",
									"        pm.test(\"Toggle Button Status is False\", function () {\r",
									"            var jsonData = pm.response.json();\r",
									"            pm.expect(jsonData.success).to.eql(true); // Verify that the request was successful\r",
									"            pm.expect(jsonData.active).to.eql(false); // Verify that the 'active' property is false\r",
									"        });\r",
									"    }\r",
									"} else if (statusCode === 404) {\r",
									"    pm.test(\"Not found\", function () {\r",
									"        pm.expect(pm.response.body).to.be.undefined;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"660df93ba90bd5000184599b\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/toggleIsActive",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"toggleIsActive"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteServiceListing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.environment.get(\"{{service_id}}\");\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar title = response.title;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: service deleted successfully\r",
									"pm.test(\"Service deleted successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"title\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.title).to.be.a(\"string\");\r",
									" });\r",
									"\r",
									"}else if (statusCode === 401) {\r",
									"// Unauthorized: unable to delete without authentication\r",
									"pm.test(\"Unable to delete without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"    }\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"660df93ba90bd5000184599b\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/deleteServiceListing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"deleteServiceListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    var balance = response.balance;\r",
									"    if(success)\r",
									"    {\r",
									"        pm.test(\"Balance is a number\", function () {\r",
									"    pm.expect(response.balance).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Check if \"balance\" value is greater than or equal to zero\r",
									"pm.test(\"Balance is greater than or equal to zero\", function () {\r",
									"    pm.expect(response.balance).to.be.at.least(0);\r",
									"});\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"balance\": {\r",
									"      \"type\": \"number\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"balance\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"    } else if (success === false)\r",
									"    {\r",
									"        pm.test(\"Balance field should not exist when success is false\", function () {\r",
									"        pm.expect(response).to.not.have.property('balance');\r",
									"    \r",
									"});\r",
									"    }\r",
									"    \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getBalance",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getBalance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ServiceCatagory Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    if(success)\r",
									"    {\r",
									"        response.data.sort(function(a, b) {\r",
									"    return a.count - b.count;\r",
									"});\r",
									"\r",
									"// Filter data based on the \"categoryId\" and \"subcategoryId\" fields\r",
									"var filteredData = response.data.filter(function(item) {\r",
									"    \r",
									"    return item.categoryId === 8 && item.subcategoryId === 5;\r",
									"});\r",
									"\r",
									"\r",
									"console.log(\"Sorted and filtered data:\", filteredData);\r",
									"pm.test(\"Data is sorted in ascending order\", function() {\r",
									"    // Check if the data is sorted in ascending order\r",
									"    for (var i = 0; i < response.data.length - 1; i++) {\r",
									"        pm.expect(response.data[i].count).to.be.at.most(response.data[i + 1].count);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Data is filtered based on categoryId and subcategoryId\", function() {\r",
									"    // Check if the filtered data meets the criteria\r",
									"    pm.expect(filteredData.length).to.be.above(0); // Ensure there are results after filtering\r",
									"    \r",
									"});\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"terms\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"searchString\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"categoryIndex\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"subcategoryIndex\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"uId\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"searchString\",\r",
									"        \"categoryIndex\",\r",
									"        \"subcategoryIndex\",\r",
									"        \"uId\"\r",
									"      ]\r",
									"    },\r",
									"    \"sortPagination\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"offset\",\r",
									"        \"limit\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"terms\",\r",
									"    \"sortPagination\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"terms\": {\r",
									"    \"searchString\": \"\",\r",
									"    \"categoryIndex\": null,\r",
									"    \"subcategoryIndex\": null,\r",
									"    \"uId\": null\r",
									"  },\r",
									"  \"sortPagination\": {\r",
									"    \"offset\": 0,\r",
									"    \"limit\": 9\r",
									"  }\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"terms\": {\r\n    \"searchString\": \"\",\r\n    \"categoryIndex\": null,\r\n    \"subcategoryIndex\": null,\r\n    \"uId\": null\r\n  },\r\n  \"sortPagination\": {\r\n    \"offset\": 0,\r\n    \"limit\": 9\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/GetServiceCategoryCount",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"GetServiceCategoryCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Catagories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    if(success) {\r",
									"        const skipCount = 2; // Number of items to skip\r",
									"        const limit = 5; // Maximum number of items to include\r",
									"        // Check if data property exists before slicing\r",
									"        if (response.categories) {\r",
									"            // Skip the specified number of results from the start of the categories array\r",
									"            const skippedData = response.categories.slice(skipCount);\r",
									"\r",
									"            // Logging the skipped data for inspection\r",
									"            console.log(skippedData);\r",
									"\r",
									"            // Set the modified response body in Postman\r",
									"            response.categories = skippedData;\r",
									"            pm.response.json(response);\r",
									"        }\r",
									"    }\r",
									"}else if(pm.response.code === 404) {\r",
									"    // Assert that the response status code is 404\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    console.log(\"Resource not found.\");\r",
									"} "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getCategories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getCategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Trade request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    if(success)\r",
									"    {\r",
									"        \r",
									"        // Sorting the data based on createdOn property in descending order\r",
									"response.data.sort((a, b) => new Date(b.createdOn) - new Date(a.createdOn));\r",
									"// Filtering the data based on a specific criteria (e.g., category)\r",
									"const filteredData = response.data.filter(item => item.category === 'Programming & Tech');\r",
									"\r",
									"// Logging the sorted and filtered data for inspection\r",
									"console.log(filteredData);\r",
									"pm.response.json(response);\r",
									"const skipCount = 2; // Number of items to skip\r",
									"const limit = 5; // Maximum number of items to include\r",
									"// Skip the specified number of results from the start of the dataset\r",
									"const skippedData = response.data.slice(skipCount);\r",
									"console.log(skippedData);\r",
									"\r",
									"// Set the modified response body in Postman\r",
									"response.data = skippedData;\r",
									"pm.response.json(response);\r",
									"    }\r",
									"}else if(pm.response.code === 404) {\r",
									"    // Assert that the response status code is 404\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    console.log(\"Resource not found.\");\r",
									"} "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"offset\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"limit\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"sortBy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"direction\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"offset\",\r",
									"    \"limit\",\r",
									"    \"sortBy\",\r",
									"    \"direction\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"offset\": 0,\r",
									"  \"limit\": 5,\r",
									"  \"sortBy\": \"createdOn\",\r",
									"  \"direction\": \"descending\"\r",
									"}\r",
									"\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offset\": 0,\r\n  \"limit\": 5,\r\n  \"sortBy\": \"createdOn\",\r\n  \"direction\": \"descending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getTradeRequests?requestType=sentRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getTradeRequests"
							],
							"query": [
								{
									"key": "requestType",
									"value": "sentRequest"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Received Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    if(success)\r",
									"    {\r",
									"        \r",
									"        // Sorting the data based on createdOn property in descending order\r",
									"response.data.sort((a, b) => new Date(b.createdOn) - new Date(a.createdOn));\r",
									"// Filtering the data based on a specific criteria (e.g., category)\r",
									"const filteredData = response.data.filter(item => item.category === 'Programming & Tech');\r",
									"\r",
									"// Logging the sorted and filtered data for inspection\r",
									"console.log(filteredData);\r",
									"pm.response.json(response);\r",
									"const skipCount = 2; // Number of items to skip\r",
									"const limit = 5; // Maximum number of items to include\r",
									"// Skip the specified number of results from the start of the dataset\r",
									"const skippedData = response.data.slice(skipCount);\r",
									"console.log(skippedData);\r",
									"\r",
									"// Set the modified response body in Postman\r",
									"response.data = skippedData;\r",
									"pm.response.json(responseBody);\r",
									"    }\r",
									"}else if(pm.response.code === 404) {\r",
									"    // Assert that the response status code is 404\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    console.log(\"Resource not found.\");\r",
									"} pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    if(success)\r",
									"    {\r",
									"        \r",
									"        // Sorting the data based on createdOn property in descending order\r",
									"response.data.sort((a, b) => new Date(b.createdOn) - new Date(a.createdOn));\r",
									"// Filtering the data based on a specific criteria (e.g., category)\r",
									"const filteredData = response.data.filter(item => item.category === 'Programming & Tech');\r",
									"\r",
									"// Logging the sorted and filtered data for inspection\r",
									"console.log(filteredData);\r",
									"pm.response.json(response);\r",
									"const skipCount = 1; // Number of items to skip\r",
									"const limit = 5; // Maximum number of items to include\r",
									"// Skip the specified number of results from the start of the dataset\r",
									"const skippedData = response.data.slice(skipCount);\r",
									"console.log(skippedData);\r",
									"\r",
									"// Set the modified response body in Postman\r",
									"response.data = skippedData;\r",
									"pm.response.json(response);\r",
									"    }\r",
									"    var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"totalCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\",\r",
									"    \"totalCount\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}else if(pm.response.code === 404) {\r",
									"    // Assert that the response status code is 404\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    console.log(\"Resource not found.\");\r",
									"} "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									" \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"offset\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"limit\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"sortBy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"direction\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"offset\",\r",
									"    \"limit\",\r",
									"    \"sortBy\",\r",
									"    \"direction\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"offset\": 0,\r",
									"  \"limit\": 5,\r",
									"  \"sortBy\": \"createdOn\",\r",
									"  \"direction\": \"descending\"\r",
									"}\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offset\": 0,\r\n  \"limit\": 5,\r\n  \"sortBy\": \"createdOn\",\r\n  \"direction\": \"descending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getTradeRequests?requestType=receivedRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getTradeRequests"
							],
							"query": [
								{
									"key": "requestType",
									"value": "receivedRequest"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Listings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    if(success)\r",
									"    {\r",
									"        \r",
									"        // Sorting the data based on createdOn property in descending order\r",
									"response.data.sort((a, b) => new Date(b.catagoryId) - new Date(a.catagoryId));\r",
									"// Filtering the data based on a specific criteria (e.g., category)\r",
									"const filteredData = response.data.filter(item => item.categoryId === '1');\r",
									"\r",
									"// Logging the sorted and filtered data for inspection\r",
									"console.log(filteredData);\r",
									"pm.response.json(response);\r",
									"const skipCount = 2; // Number of items to skip\r",
									"const limit = 5; // Maximum number of items to include\r",
									"// Skip the specified number of results from the start of the dataset\r",
									"const skippedData = response.data.slice(skipCount);\r",
									"console.log(skippedData);\r",
									"\r",
									"// Set the modified response body in Postman\r",
									"response.data = skippedData;\r",
									"pm.response.json(response);\r",
									"    }\r",
									"}else if(pm.response.code === 404) {\r",
									"    // Assert that the response status code is 404\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"    console.log(\"Resource not found.\");\r",
									"} "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"terms\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"searchString\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"categoryIndex\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"subcategoryIndex\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"uId\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"searchString\",\r",
									"        \"categoryIndex\",\r",
									"        \"subcategoryIndex\",\r",
									"        \"uId\"\r",
									"      ]\r",
									"    },\r",
									"    \"sortPagination\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"offset\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"limit\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"offset\",\r",
									"        \"limit\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"terms\",\r",
									"    \"sortPagination\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"terms\": {\r",
									"    \"searchString\": \"\",\r",
									"    \"categoryIndex\": null,\r",
									"    \"subcategoryIndex\": null,\r",
									"    \"uId\": null\r",
									"  },\r",
									"  \"sortPagination\": {\r",
									"    \"offset\": 0,\r",
									"    \"limit\": 9\r",
									"  }\r",
									"}\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"terms\": {\r\n    \"searchString\": \"\",\r\n    \"categoryIndex\": null,\r\n    \"subcategoryIndex\": null,\r\n    \"uId\": null\r\n  },\r\n  \"sortPagination\": {\r\n    \"offset\": 0,\r\n    \"limit\": 9\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/searchListings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"searchListings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sent Trade Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains success message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('success', true);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"ListingId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"TotalHours\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"TotalAmount\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"ListingId\",\r",
									"    \"Message\",\r",
									"    \"TotalHours\",\r",
									"    \"TotalAmount\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"ListingId\": \"5c6218c5c38cb200054f12c3\",\r",
									"  \"Message\": \"\",\r",
									"  \"TotalHours\": 0,\r",
									"  \"TotalAmount\": 0\r",
									"}\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ListingId\": \"5c6218c5c38cb200054f12c3\",\r\n  \"Message\": \"\",\r\n  \"TotalHours\": 0,\r\n  \"TotalAmount\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/sendTradeRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"sendTradeRequest"
							]
						}
					},
					"response": [
						{
							"name": "Sent Trade Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ListingId\": \"5db6a886d67ea40005a35586\",\r\n  \"Message\": \"\",\r\n  \"TotalHours\": 10,\r\n  \"TotalAmount\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:51689/listing/listing/sendTradeRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "51689",
									"path": [
										"listing",
										"listing",
										"sendTradeRequest"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Profile API",
			"item": [
				{
					"name": "Add Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"})\r",
									"\r",
									"pm.test('Server header is Kestrel', () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"})\r",
									"\r",
									"pm.test('Response time is less than 2200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"})\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: description added successfully\r",
									"pm.test(\"Description updated successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"\r",
									"pm.test(\"Message is 'Description Updated Successfully'\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Description Updated Successfully\");\r",
									"});\r",
									"\r",
									"const responseBody = pm.response.json();\r",
									"const id = responseBody.id;\r",
									"pm.environment.set(\"description_id\", id);\r",
									"})\r",
									"// Assertion - Validate schema response\r",
									"var AddDescriptionschema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddDescriptionschema);\r",
									"});\r",
									"\r",
									"//Test data type of response\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									" });\r",
									"} \r",
									"else if (message === \"First character can only be digit or letters\") {\r",
									" // Negative case: 1\r",
									"pm.test(\"Incorrect Format\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"First character can only be digit or letters\");\r",
									"\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");  \r",
									"    pm.expect(jsonData.success).to.be.a(\"boolean\"); \r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									" });\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"});\r",
									"}\r",
									"} else if (statusCode === 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add language without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"personId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"personId\",\r",
									"    \"description\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"personId\": 0,\r",
									"  \"description\": \"I am a good tester\"\r",
									"}\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"personId\": 0,\r\n  \"description\": \"I am a good tester\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addInfo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addInfo"
							]
						}
					},
					"response": [
						{
							"name": "Add Info",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": 0,\r\n  \"description\": \"asgdggdgdg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addInfo",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addInfo"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Info",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": 0,\r\n  \"description\": \"1234@#$\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addInfo",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addInfo"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Verify \"username\" field\r",
									"pm.test(\"Username is 'test'\", function() {\r",
									"    pm.expect(pm.response.json().username).to.equal(\"te\");\r",
									"});\r",
									"\r",
									"// Verify \"isDeactivated\" field\r",
									"pm.test(\"isDeactivated is false\", function() {\r",
									"    pm.expect(pm.response.json().isDeactivated).to.be.false;\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isDeactivated\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"username\",\r",
									"    \"isDeactivated\"\r",
									"  ]\r",
									"}\r",
									"\r",
									" //Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getProfile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getProfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile Photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"user_id\");\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"var schema = {\r",
									"    'type': 'object',\r",
									"    'properties': {\r",
									"        'success': { 'type': 'boolean' },\r",
									"        'myPhotoUrl': { 'type': 'string' },\r",
									"        'otherPhotoUrl': { 'type': 'string' }\r",
									"    },\r",
									"    'required': [\r",
									"        'success',\r",
									"        'myPhotoUrl',\r",
									"        'otherPhotoUrl'\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test('Validate schema', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test('Success field is true', function () {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"})\r",
									"\r",
									"pm.environment.set(\"user_id\", \"uid\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getProfilePhoto/?uid=5c621663bea4490005ebe9d2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getProfilePhoto",
								""
							],
							"query": [
								{
									"key": "uid",
									"value": "5c621663bea4490005ebe9d2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Seller Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.environment.get(\"user_id\");\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar userName = response.userName;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"      pm.test(\"Success field is true\", function() {\r",
									"    pm.expect(response.success).to.be.true;\r",
									"});\r",
									"pm.test(\"userName field contains expected value\", function() {\r",
									"    pm.expect(response.userName).to.equal(\"xxx\");\r",
									"});\r",
									"\r",
									"pm.test(\"description field is null\", function() {\r",
									"    pm.expect(response.description).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"averageRating field is 0\", function() {\r",
									"    pm.expect(response.averageRating).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"ratingsCount field is 0\", function() {\r",
									"    pm.expect(response.ratingsCount).to.equal(0);\r",
									"});\r",
									"\r",
									"pm.test(\"country field is an empty string\", function() {\r",
									"    pm.expect(response.country).to.equal(\"\");\r",
									"});\r",
									"pm.test(\"createdOn field is a valid date\", function() {\r",
									"    pm.expect(response.createdOn).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);\r",
									"});\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"userName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"averageRating\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"ratingsCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"country\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"createdOn\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"userName\",\r",
									"    \"description\",\r",
									"    \"averageRating\",\r",
									"    \"ratingsCount\",\r",
									"    \"country\",\r",
									"    \"createdOn\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Validate schema', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"}else if(success === false)\r",
									"{\r",
									"    pm.test(\"Seller details not retrieved\", function() {\r",
									"    pm.expect(response.success).to.be.false;\r",
									"});\r",
									"\r",
									"}\r",
									"    }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getSellerDetails/?uid=5c5f42f4bea4490005ebe9cd",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getSellerDetails",
								""
							],
							"query": [
								{
									"key": "uid",
									"value": "5c5f42f4bea4490005ebe9cd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Is User Authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"user_id\");\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar isAuthenticated = response.isAuthenticated;\r",
									"\tvar username = response.username;\r",
									"\r",
									"    if(isAuthenticated)\r",
									"    {\r",
									"        pm.test(\"isAuthenticated field is true\", function() {\r",
									"        pm.expect(response.isAuthenticated).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"username field contains expected value\", function() {\r",
									"    pm.expect(response.username).to.equal(\"te\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"isAuthenticated\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"isAuthenticated\",\r",
									"    \"username\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Validate schema', () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"    }\r",
									"    }\t\t\t\t\t\t\t\t\t    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/isUserAuthenticated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"isUserAuthenticated"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update First and Last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"})\r",
									"\r",
									"pm.test('Server header is Kestrel', () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"})\r",
									"\r",
									"pm.test('Response time is less than 2200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"})\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Firstname and Lastname Changed successfully\r",
									"pm.test(\"Firstname and Lastname Changed\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"\r",
									"pm.test(\"Message is 'Firstname and Lastname Changed'\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Firstname and Lastname Changed\");\r",
									"});\r",
									"\r",
									"const responseBody = pm.response.json();\r",
									"const id = responseBody.id;\r",
									"pm.environment.set(\"username_id\", id);\r",
									"})\r",
									"\r",
									"// Assertion - Validate schema response\r",
									"var AddUsernameschema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddUsernameschema);\r",
									"});\r",
									"}\r",
									"    }else if (statusCode === 401) {\r",
									"\r",
									"pm.test(\"Unable to add description without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"firstName\",\r",
									"    \"lastName\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"firstName\": \"te\",\r",
									"  \"lastName\": \"Ana\"\r",
									"}\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"te\",\r\n  \"lastName\": \"Ana\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateFirstAndLastName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateFirstAndLastName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is present', () => {\r",
									"    pm.response.to.have.header('Content-Type');\r",
									"})\r",
									"\r",
									"pm.test('Content-Type header is application/json', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"})\r",
									"\r",
									"pm.test('Server header is Kestrel', () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"})\r",
									"\r",
									"pm.test('Response time is less than 2200ms', () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"})\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Availability Updated Successfully\r",
									"pm.test(\"Availability Updated Successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"\r",
									"pm.test(\"Message is 'Availability Updated Successfully'\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Availability Updated Successfully\");\r",
									"});\r",
									"\r",
									"const responseBody = pm.response.json();\r",
									"const id = responseBody.id;\r",
									"pm.environment.set(\"availability_id\", id);\r",
									"})\r",
									"\r",
									"// Assertion - Validate schema response\r",
									"var AddAvailabilityschema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddAvailabilityschema);\r",
									"});\r",
									"}else if (success === false)\r",
									"{\r",
									"    pm.test(\"Availability Not Updated Successfully\", function () {\r",
									"pm.expect(success).to.be.false;\r",
									"    });\r",
									"}\r",
									"    }else if (statusCode === 401) {\r",
									"\r",
									"pm.test(\"Unable to add availability without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const requestSchema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"AvailabilityType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"AvailableHours\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"EarnTarget\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"AvailabilityType\",\r",
									"    \"AvailableHours\",\r",
									"    \"EarnTarget\"\r",
									"  ]\r",
									"}\r",
									"// Extract the request body from the request object\r",
									"const requestBody = {\r",
									"  \"AvailabilityType\": \"0\",\r",
									"  \"AvailableHours\": \"0\",\r",
									"  \"EarnTarget\": 2\r",
									"}\r",
									"// Validate the request body against the schema using tv4\r",
									"pm.test(\"Request schema is valid\", function() {\r",
									"    pm.expect(tv4.validate(requestBody, requestSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"AvailabilityType\": \"0\",\r\n  \"AvailableHours\": \"0\",\r\n  \"EarnTarget\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateAvailability",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateAvailability"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification API",
			"item": [
				{
					"name": "Get Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"})\r",
									"\r",
									"pm.test(\"Success field is true\", function() {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"pm.test(\"userNotifications array is present and has expected length\", function() {\r",
									"    pm.expect(pm.response.json().userNotifications).to.be.an('array');\r",
									"    pm.expect(pm.response.json().userNotifications.length).to.equal(5); \r",
									"});\r",
									"\r",
									"pm.response.json().userNotifications.forEach(function(notification, index) {\r",
									"    pm.test(\"Notification \" + (index + 1) + \" has expected fields\", function() {\r",
									"        pm.expect(notification.id).to.be.a('string');\r",
									"        pm.expect(notification.name).to.be.a('string');\r",
									"        pm.expect(notification.url).to.be.a('string');\r",
									"        pm.expect(notification.message).to.be.a('string');\r",
									"        pm.expect(notification.isViewed).to.be.a('boolean');\r",
									"       \r",
									"        pm.expect(notification.notificationType).to.be.a('number');\r",
									"        pm.expect(notification.icon).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Verify \"totalCount\" field\r",
									"pm.test(\"totalCount field is present and has expected value\", function() {\r",
									"    pm.expect(pm.response.json().totalCount).to.equal(8); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/notification/notification/getNotification?numberOfNotifications=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"getNotification"
							],
							"query": [
								{
									"key": "numberOfNotifications",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get new notification count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"});\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"    var noOfNotification = response.noOfNotification;\r",
									"    var noOfMessages = response.noOfMessages;\r",
									"\r",
									"    if (success) {\r",
									"        pm.test(\"Success field is true\", function() {\r",
									"            pm.expect(response.success).to.be.true;\r",
									"        });\r",
									"\r",
									"        var schema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"success\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                },\r",
									"                \"noOfNotification\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"noOfMessages\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"success\",\r",
									"                \"noOfNotification\",\r",
									"                \"noOfMessages\"\r",
									"            ]\r",
									"        };\r",
									"\r",
									"        pm.test('Validate schema', () => {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    } else if (success === false) {\r",
									"        pm.test(\"Notification count not retrieved\", function() {\r",
									"            pm.expect(response.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/notification/notification/getNewNotificationCount",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"getNewNotificationCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification Load More",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"});\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"\r",
									"pm.test(\"Success field is true\", function() {\r",
									"    pm.expect(pm.response.json().success).to.be.true;\r",
									"});\r",
									"pm.test(\"userNotifications array is present and has expected length\", function() {\r",
									"    pm.expect(pm.response.json().userNotifications).to.be.an('array');\r",
									"    pm.expect(pm.response.json().userNotifications.length).to.equal(5); \r",
									"});\r",
									"pm.response.json().userNotifications.forEach(function(notification, index) {\r",
									"    pm.test(\"Notification \" + (index + 1) + \" has expected fields\", function() {\r",
									"        pm.expect(notification.id).to.be.a('string');\r",
									"        pm.expect(notification.name).to.be.a('string');\r",
									"        pm.expect(notification.url).to.be.a('string');\r",
									"        pm.expect(notification.message).to.be.a('string');\r",
									"        pm.expect(notification.isViewed).to.be.a('boolean');\r",
									"       \r",
									"        pm.expect(notification.notificationType).to.be.a('number');\r",
									"        pm.expect(notification.icon).to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Verify \"totalCount\" field\r",
									"pm.test(\"totalCount field is present and has expected value\", function() {\r",
									"    pm.expect(pm.response.json().totalCount).to.equal(8); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "loadMore: 5\r\noffSet: 0\r\n_: 1712137147275",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/notification/notification/getNotification/?loadMore=5&offSet=0&_=1712137147275",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"getNotification",
								""
							],
							"query": [
								{
									"key": "loadMore",
									"value": "5"
								},
								{
									"key": "offSet",
									"value": "0"
								},
								{
									"key": "_",
									"value": "1712137147275"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ReadAll Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201\r",
									"    ]);\r",
									"});\r",
									"\r",
									"pm.test('status code has a string ', function () {\r",
									"    pm.response.to.have.status('OK');\r",
									"});\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"\r",
									"    if(success)\r",
									"    {\r",
									"        pm.test(\"Success field is true\", function() {\r",
									"            pm.expect(response.success).to.be.true;\r",
									"        });\r",
									"    }else if (success === false)\r",
									"    {\r",
									"      pm.test(\"Notification not read\", function() {\r",
									"            pm.expect(response.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/notification/notification/readAllNotifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"readAllNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Marked Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\" , function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    });\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    var success = response.success;\r",
									"\r",
									"    if(success)\r",
									"    {\r",
									"        pm.test(\"Success field is true\", function() {\r",
									"            pm.expect(response.success).to.be.true;\r",
									"        });\r",
									"\r",
									"        var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Validate schema', () => {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"\r",
									"    }else if (success === false)\r",
									"    {\r",
									"      pm.test(\"Notification not read\", function() {\r",
									"            pm.expect(response.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}else if (statusCode === 401)\r",
									"{\r",
									"    pm.test(\"Unable to read notification without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									" });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/notification/notification/readMarkedNotifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"readMarkedNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Marked Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\" , function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    });\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"    var message = response.message;\r",
									"    if(success)\r",
									"    {\r",
									"         pm.test(\"Success field is true\", function() {\r",
									"            pm.expect(response.success).to.be.true;\r",
									"        });\r",
									"    }\r",
									"    else if (success === false)\r",
									"    {\r",
									"        pm.test(\"No objects passed\", function() {\r",
									"     pm.expect(response.success).to.be.false;\r",
									"        });\r",
									"        pm.test(\"Verify response message\", function() {\r",
									"        pm.expect(response.message).to.be.equal(\"no objects passed\")\r",
									"    });\r",
									"}\r",
									"    \r",
									"    }else if (statusCode === 404)\r",
									"    {\r",
									"        pm.test(\"Not Found\", function() {\r",
									"     pm.expect(response.success).to.be.null;\r",
									"        });\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "64f550d4ce11ee00013ec5fe",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/notification/notification/removeMarkedNotifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"removeMarkedNotifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chat API",
			"item": [
				{
					"name": "Get First Chatroom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\" , function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    });\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode === 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"    var chatroom = response.chatroom;\r",
									"    var currentUserId = response.myCurrentUser;\r",
									"    if(success)\r",
									"    {\r",
									"         pm.test(\"Success field is true\", function() {\r",
									"    pm.expect(response.success).to.be.true;\r",
									"});\r",
									"        pm.environment.set(\"chatroom_id\", \"chatroom\");\r",
									"\r",
									"        pm.environment.set(\"currentUserId\", \"myCurrentUser\");\r",
									"\r",
									"        pm.environment.get(\"chatroom_id\");\r",
									"pm.test(\"chatroom field contains expected value\", function() {\r",
									"    pm.expect(response.chatroom).to.equal(\"648f9f474d336600017ec271\");\r",
									"});\r",
									"pm.test(\"currentUserId field contains expected value\", function() {\r",
									"    pm.expect(response.myCurrentUser).to.equal(\"64acb2be19c6c70001faf47a\");\r",
									"});\r",
									"var schema = {\r",
									"  \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"chatroom\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"myCurrentUser\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"chatroom\",\r",
									"    \"myCurrentUser\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"    }\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getFirstChatroom",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getFirstChatroom"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chatroom Details List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Successful POST request\" , function(){\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"    });\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserIdToList\":\r\n[\r\n  \"648f9f474d336600017ec271\",\r\n  \"64acb2be19c6c70001faf47a\",\r\n  \"648fa28c3217d60001caa6ff\",\r\n  \"64acb2be19c6c70001faf47a\",\r\n  \"64fdc0b4a7422b0001f06377\"\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getChatRoomDetailsList/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getChatRoomDetailsList",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NGFjYjJiZTE5YzZjNzAwMDFmYWY0N2EiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjYwOTY4IiwiaWF0IjoxNzExNTIwNTU3LCJleHAiOjE3MTE1MjQxNTcsInVuaXF1ZV9uYW1lIjoiNjRhY2IyYmUxOWM2YzcwMDAxZmFmNDdhIn0.mv2SH1IEethINEqnbT-Rgwuz4DGXQIqgv2HyrwWF6f4",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const authToken = pm.environment.get(\"authToken\");\r",
					"if (authToken) {\r",
					"    pm.request.headers.add({key: \"Authorization\", value: `Bearer ${authToken}`});\r",
					"} else {\r",
					"    console.warn(\"No auth token found in environment\");\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}